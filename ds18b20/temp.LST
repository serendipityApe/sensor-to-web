C51 COMPILER V9.60.0.0   TEMP                                                              06/10/2021 22:17:54 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TEMP
OBJECT MODULE PLACED IN temp.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\keil\C51\BIN\C51.EXE temp.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS
                    -(2)

line level    source

   1          
   2          #include"temp.h"
   3          
   4          
   5          /*******************************************************************************
   6          * 函 数 名         : Delay1ms
   7          * 函数功能       : 延时函数
   8          * 输    入         : 无
   9          * 输    出         : 无
  10          *******************************************************************************/
  11          void Delay1ms(uint y)
  12          {
  13   1        uint x;
  14   1        for( ; y>0; y--)
  15   1        {
  16   2          for(x=110; x>0; x--);
  17   2        }
  18   1      }
  19          
  20          /*******************************************************************************
  21          * 函 数 名         : Ds18b20Init
  22          * 函数功能       : 初始化
  23          * 输    入         : 无
  24          * 输    出         : 初始化成功返回1，失败返回0
  25          *******************************************************************************/
  26          uchar Ds18b20Init()
  27          {
  28   1        uchar i;
  29   1        DSPORT = 0;      //将总线拉低480us~960us
  30   1        i = 70; 
  31   1        while(i--);//延时642us
  32   1        DSPORT = 1;     //然后拉高总线，如果DS18B20做出反应会将在15us~60us后总线拉低
  33   1        i = 0;
  34   1        while(DSPORT) //等待DS18B20拉低总线
  35   1        {
  36   2          Delay1ms(1);
  37   2          i++;
  38   2          if(i>5)//等待>5MS
  39   2          {
  40   3            return 0;//初始化失败
  41   3          }
  42   2        
  43   2        }
  44   1        return 1;//初始化成功
  45   1      }
  46          
  47          /*******************************************************************************
  48          * 函 数 名         : Ds18b20WriteByte
  49          * 函数功能       : 向18B20写入一个字节
  50          * 输    入         : 无
  51          * 输    出         : 无
  52          *******************************************************************************/
  53          void Ds18b20WriteByte(uchar dat)
  54          {
C51 COMPILER V9.60.0.0   TEMP                                                              06/10/2021 22:17:54 PAGE 2   

  55   1        uint i, j;
  56   1      
  57   1        for(j=0; j<8; j++)
  58   1        {
  59   2          DSPORT = 0;         //每写入一位数据之前先把总线拉低1us
  60   2          i++;
  61   2          DSPORT = dat & 0x01;  //然后写入一个数据，从最低位开始
  62   2          i=6;
  63   2          while(i--); //延时68us，持续时间最少60us
  64   2          DSPORT = 1; //然后释放总线，至少1us给总线恢复时间才能接着写入第二个数值
  65   2          dat >>= 1;
  66   2        }
  67   1      }
  68          /*******************************************************************************
  69          * 函 数 名         : Ds18b20ReadByte
  70          * 函数功能       : 读取一个字节
  71          * 输    入         : 无
  72          * 输    出         : 无
  73          *******************************************************************************/
  74          uchar Ds18b20ReadByte()
  75          {
  76   1        uchar byte, bi;
  77   1        uint i, j;  
  78   1        for(j=8; j>0; j--)
  79   1        {
  80   2          DSPORT = 0;//先将总线拉低1us
  81   2          i++;
  82   2          DSPORT = 1;//然后释放总线
  83   2          i++;
  84   2          i++;//延时6us等待数据稳定
  85   2          bi = DSPORT;   //读取数据，从最低位开始读取
  86   2          /*将byte左移一位，然后与上右移7位后的bi，注意移动之后移掉那位补0。*/
  87   2          byte = (byte >> 1) | (bi << 7);             
  88   2          i = 4;    //读取完之后等待48us再接着读取下一个数
  89   2          while(i--);
  90   2        }       
  91   1        return byte;
  92   1      }
  93          /*******************************************************************************
  94          * 函 数 名         : Ds18b20ChangTemp
  95          * 函数功能       : 让18b20开始转换温度
  96          * 输    入         : 无
  97          * 输    出         : 无
  98          *******************************************************************************/
  99          void  Ds18b20ChangTemp()
 100          {
 101   1        Ds18b20Init();
 102   1        Delay1ms(1);
 103   1        Ds18b20WriteByte(0xcc);   //跳过ROM操作命令    
 104   1        Ds18b20WriteByte(0x44);     //温度转换命令
 105   1        //Delay1ms(100);  //等待转换成功，而如果你是一直刷着的话，就不用这个延时了
 106   1         
 107   1      }
 108          /*******************************************************************************
 109          * 函 数 名         : Ds18b20ReadTempCom
 110          * 函数功能       : 发送读取温度命令
 111          * 输    入         : 无
 112          * 输    出         : 无
 113          *******************************************************************************/
 114          void  Ds18b20ReadTempCom()
 115          { 
 116   1      
C51 COMPILER V9.60.0.0   TEMP                                                              06/10/2021 22:17:54 PAGE 3   

 117   1        Ds18b20Init();
 118   1        Delay1ms(1);
 119   1        Ds18b20WriteByte(0xcc);  //跳过ROM操作命令
 120   1        Ds18b20WriteByte(0xbe);  //发送读取温度命令
 121   1      }
 122          
 123          /*******************************************************************************
 124          * 函 数 名         : Ds18b20ReadTemp
 125          * 函数功能       : 读取温度
 126          * 输    入         : 无
 127          * 输    出         : 无
 128          *******************************************************************************/
 129          int Ds18b20ReadTemp()
 130          {
 131   1        int temp = 0;
 132   1        uchar tmh, tml;
 133   1        Ds18b20ChangTemp();       //先写入转换命令
 134   1        Ds18b20ReadTempCom();     //然后等待转换完后发送读取温度命令
 135   1        tml = Ds18b20ReadByte();    //读取温度值共16位，先读低字节
 136   1        tmh = Ds18b20ReadByte();    //再读高字节
 137   1        temp = tmh;
 138   1        temp <<= 8;
 139   1        temp |= tml;
 140   1        return temp;
 141   1      }
 142          
 143          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    237    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
